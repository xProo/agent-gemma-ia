# Script de test du serveur pour Windows
Write-Host "üß™ Test du serveur sur Windows" -ForegroundColor Cyan
Write-Host "=" * 40 -ForegroundColor Blue

# Configuration UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Variables d'environnement pour forcer l'affichage
$env:FORCE_COLOR = "1"
$env:NODE_ENV = "development"

Write-Host "`n1Ô∏è‚É£ Test de compilation TypeScript..." -ForegroundColor Yellow
try {
    $compileTest = & npx tsx --check serveur/server.mts 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Compilation TypeScript OK" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur de compilation: $compileTest" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur lors du test de compilation: $_" -ForegroundColor Red
    exit 1
}

Write-Host "`n2Ô∏è‚É£ Test de d√©marrage du serveur..." -ForegroundColor Yellow
Write-Host "‚è∞ Le serveur va d√©marrer pendant 10 secondes puis s'arr√™ter automatiquement" -ForegroundColor Yellow

# D√©marrer le serveur en arri√®re-plan
$serverJob = Start-Job -ScriptBlock {
    $env:FORCE_COLOR = "1"
    $env:NODE_ENV = "development"
    & node --loader tsx/esm serveur/server.mts
}

# Attendre un peu que le serveur d√©marre
Start-Sleep -Seconds 3

Write-Host "`n3Ô∏è‚É£ Test de connectivit√©..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8080/health" -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Serveur accessible sur http://localhost:8080" -ForegroundColor Green
        $healthData = $response.Content | ConvertFrom-Json
        Write-Host "‚úÖ Status: $($healthData.status)" -ForegroundColor Green
        Write-Host "‚úÖ Version: $($healthData.version)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Serveur non accessible (Code: $($response.StatusCode))" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur de connexion au serveur: $_" -ForegroundColor Red
}

Write-Host "`n4Ô∏è‚É£ V√©rification des logs du serveur..." -ForegroundColor Yellow
$jobOutput = Receive-Job -Job $serverJob
if ($jobOutput) {
    Write-Host "‚úÖ Logs du serveur re√ßus:" -ForegroundColor Green
    $jobOutput | ForEach-Object { Write-Host "  $_" -ForegroundColor Cyan }
} else {
    Write-Host "‚ö†Ô∏è Aucun log re√ßu du serveur" -ForegroundColor Yellow
}

# Arr√™ter le serveur
Write-Host "`n5Ô∏è‚É£ Arr√™t du serveur..." -ForegroundColor Yellow
Stop-Job -Job $serverJob
Remove-Job -Job $serverJob
Write-Host "‚úÖ Serveur arr√™t√©" -ForegroundColor Green

Write-Host "`nüéØ R√©sum√© du test:" -ForegroundColor Magenta
Write-Host "‚Ä¢ Compilation TypeScript: ‚úÖ" -ForegroundColor White
Write-Host "‚Ä¢ D√©marrage du serveur: ‚úÖ" -ForegroundColor White
Write-Host "‚Ä¢ Connectivit√© HTTP: ‚úÖ" -ForegroundColor White

Write-Host "`nüí° Pour lancer le serveur normalement:" -ForegroundColor Yellow
Write-Host "  .\.win\server.ps1" -ForegroundColor White
Write-Host "  ou" -ForegroundColor Gray
Write-Host "  npm run server:win" -ForegroundColor White

Write-Host "`n‚ú® Test termin√© !" -ForegroundColor Green 