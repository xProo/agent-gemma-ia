# Script de diagnostic pour Windows
Write-Host "üîç Diagnostic des probl√®mes Windows" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Blue

# Configuration UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Test 1: V√©rifier Node.js
Write-Host "`n1Ô∏è‚É£ V√©rification de Node.js..." -ForegroundColor Yellow
try {
    $nodeVersion = & node --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Node.js install√©: $nodeVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Node.js non trouv√© dans le PATH" -ForegroundColor Red
        Write-Host "üí° Installez Node.js depuis https://nodejs.org/" -ForegroundColor Yellow
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification de Node.js: $_" -ForegroundColor Red
    exit 1
}

# Test 2: V√©rifier npm
Write-Host "`n2Ô∏è‚É£ V√©rification de npm..." -ForegroundColor Yellow
try {
    $npmVersion = & npm --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ npm install√©: $npmVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ùå npm non trouv√©" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification de npm: $_" -ForegroundColor Red
}

# Test 3: V√©rifier les d√©pendances
Write-Host "`n3Ô∏è‚É£ V√©rification des d√©pendances..." -ForegroundColor Yellow
if (Test-Path "package.json") {
    if (Test-Path "node_modules") {
        Write-Host "‚úÖ node_modules trouv√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùì node_modules manquant. Installation des d√©pendances..." -ForegroundColor Yellow
        & npm install
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ D√©pendances install√©es avec succ√®s" -ForegroundColor Green
        } else {
            Write-Host "‚ùå √âchec de l'installation des d√©pendances" -ForegroundColor Red
        }
    }
} else {
    Write-Host "‚ùå package.json non trouv√© dans le r√©pertoire courant" -ForegroundColor Red
}

# Test 4: V√©rifier tsx
Write-Host "`n4Ô∏è‚É£ V√©rification de tsx..." -ForegroundColor Yellow
try {
    $tsxCheck = & npx tsx --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ tsx accessible via npx" -ForegroundColor Green
    } else {
        Write-Host "‚ùì Installation de tsx globalement..." -ForegroundColor Yellow
        & npm install -g tsx
    }
} catch {
    Write-Host "‚ùì Installation de tsx..." -ForegroundColor Yellow
    & npm install -g tsx
}

# Test 5: V√©rifier l'encodage de la console
Write-Host "`n5Ô∏è‚É£ Test d'affichage des emojis..." -ForegroundColor Yellow
Write-Host "üöÄ üî• üí¨ ‚úÖ ‚ùå üîç üì°" -ForegroundColor Cyan
Write-Host "Si vous voyez des emojis ci-dessus, l'affichage fonctionne correctement !" -ForegroundColor Green

# Test 6: V√©rifier les fichiers n√©cessaires
Write-Host "`n6Ô∏è‚É£ V√©rification des fichiers..." -ForegroundColor Yellow
$requiredFiles = @(
    "CLI/cli.mts",
    "serveur/server.mts",
    "serveur/server-simple.mts"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file trouv√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file manquant" -ForegroundColor Red
    }
}

# Test 7: Test simple du CLI
Write-Host "`n7Ô∏è‚É£ Test rapide du CLI..." -ForegroundColor Yellow
try {
    $cliTest = & node --loader tsx/esm CLI/cli.mts --help 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ CLI accessible" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Probl√®me avec le CLI: $cliTest" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors du test du CLI: $_" -ForegroundColor Red
}

# Informations syst√®me
Write-Host "`n8Ô∏è‚É£ Informations syst√®me..." -ForegroundColor Yellow
Write-Host "OS: $([System.Environment]::OSVersion.VersionString)" -ForegroundColor Cyan
Write-Host "PowerShell: $($PSVersionTable.PSVersion)" -ForegroundColor Cyan
Write-Host "R√©pertoire courant: $(Get-Location)" -ForegroundColor Cyan

# R√©sum√© et recommandations
Write-Host "`nüéØ Recommandations pour Windows:" -ForegroundColor Magenta
Write-Host "‚Ä¢ Utilisez PowerShell (recommand√©) ou CMD" -ForegroundColor White
Write-Host "‚Ä¢ Lancez: .\.win\cli.ps1 ou .\.win\cli.bat" -ForegroundColor White
Write-Host "‚Ä¢ Pour le serveur: .\.win\server.ps1 ou .\.win\server.bat" -ForegroundColor White
Write-Host "‚Ä¢ Alternative: npm run cli:win ou npm run server:win" -ForegroundColor White
Write-Host "‚Ä¢ Test du serveur: .\.win\test-server.ps1" -ForegroundColor White

# Proposer de lancer le test du serveur
$testResponse = Read-Host "`nVoulez-vous tester le serveur maintenant ? (o/N)"
if ($testResponse -eq "o" -or $testResponse -eq "O" -or $testResponse -eq "oui") {
    Write-Host "`nüß™ Lancement du test du serveur..." -ForegroundColor Cyan
    & ".\.win\test-server.ps1"
}

Write-Host "`n‚ú® Diagnostic termin√© !" -ForegroundColor Green 