# Script d'installation automatique pour Windows
Write-Host "ü™ü Installation automatique pour Windows" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Blue

# Configuration UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# V√©rifier si on est dans le bon r√©pertoire
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Erreur: package.json non trouv√©" -ForegroundColor Red
    Write-Host "üí° Veuillez ex√©cuter ce script depuis la racine du projet" -ForegroundColor Yellow
    exit 1
}

Write-Host "`n1Ô∏è‚É£ V√©rification de Node.js..." -ForegroundColor Yellow
try {
    $nodeVersion = & node --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Node.js install√©: $nodeVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Node.js non trouv√©. Installation requise." -ForegroundColor Red
        Write-Host "üí° T√©l√©chargez Node.js depuis https://nodejs.org/" -ForegroundColor Yellow
        Start-Process "https://nodejs.org/"
        exit 1
    }
} catch {
    Write-Host "‚ùå Node.js non trouv√©. Installation requise." -ForegroundColor Red
    Write-Host "üí° T√©l√©chargez Node.js depuis https://nodejs.org/" -ForegroundColor Yellow
    Start-Process "https://nodejs.org/"
    exit 1
}

Write-Host "`n2Ô∏è‚É£ Installation des d√©pendances..." -ForegroundColor Yellow
& npm install
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ D√©pendances install√©es avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚ùå √âchec de l'installation des d√©pendances" -ForegroundColor Red
    exit 1
}

Write-Host "`n3Ô∏è‚É£ Configuration de l'environnement..." -ForegroundColor Yellow
$envPath = "CLI\.env"
if (-not (Test-Path $envPath)) {
    Write-Host "üìù Cr√©ation du fichier .env..." -ForegroundColor Yellow
    $envContent = @"
# Configuration pour Windows
BEARER=your-token-here
API_URL=http://localhost:8080
PORT=8080
REQUIRE_AUTH=false

# Cl√©s API (√† configurer selon vos besoins)
# OPENAI_API_KEY=sk-...
# TAVILY_API_KEY=tvly-...
"@
    $envContent | Out-File -FilePath $envPath -Encoding UTF8
    Write-Host "‚úÖ Fichier .env cr√©√© dans CLI/.env" -ForegroundColor Green
    Write-Host "üí° N'oubliez pas de configurer votre token BEARER" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Fichier .env d√©j√† pr√©sent" -ForegroundColor Green
}

Write-Host "`n4Ô∏è‚É£ Test de l'installation..." -ForegroundColor Yellow
try {
    $testResult = & node --loader tsx/esm CLI/cli.mts --help 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ CLI fonctionne correctement" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Probl√®me avec le CLI" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors du test du CLI" -ForegroundColor Red
}

Write-Host "`n5Ô∏è‚É£ Configuration des politiques PowerShell..." -ForegroundColor Yellow
try {
    $currentPolicy = Get-ExecutionPolicy -Scope CurrentUser
    if ($currentPolicy -eq "Restricted") {
        Write-Host "üîß Configuration de la politique d'ex√©cution..." -ForegroundColor Yellow
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
        Write-Host "‚úÖ Politique d'ex√©cution configur√©e" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ Politique d'ex√©cution d√©j√† configur√©e: $currentPolicy" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Impossible de configurer automatiquement la politique d'ex√©cution" -ForegroundColor Yellow
    Write-Host "üí° Ex√©cutez manuellement: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser" -ForegroundColor Yellow
}

Write-Host "`nüéâ Installation termin√©e !" -ForegroundColor Green
Write-Host "`nüöÄ Commandes disponibles:" -ForegroundColor Magenta
Write-Host "‚Ä¢ CLI: .\.win\cli.ps1 ou npm run cli:win" -ForegroundColor White
Write-Host "‚Ä¢ Serveur: .\.win\server.ps1 ou npm run server:win" -ForegroundColor White
Write-Host "‚Ä¢ Diagnostic: .\.win\diagnostic-windows.ps1" -ForegroundColor White

Write-Host "`nüìñ Documentation compl√®te: .\.win\WINDOWS-README.md" -ForegroundColor Cyan

# Demander si l'utilisateur veut lancer le diagnostic
$response = Read-Host "`nVoulez-vous lancer le diagnostic maintenant ? (o/N)"
if ($response -eq "o" -or $response -eq "O" -or $response -eq "oui") {
    Write-Host "`nüîç Lancement du diagnostic..." -ForegroundColor Cyan
    & ".\.win\diagnostic-windows.ps1"
} 